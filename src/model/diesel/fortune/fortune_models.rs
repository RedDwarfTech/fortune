// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use rocket::serde::Serialize;
use serde::Deserialize;
use crate::model::diesel::fortune::fortune_schema::*;
use crate::model::response::contents::fortune_contents_response::FortuneContentResponse;
use crate::service::contents::convert_to_tree::IntoTree;

#[derive(Insertable,Queryable,QueryableByName,Debug,Serialize,Deserialize,Default,Clone)]
#[table_name = "fortune_contents"]
pub struct FortuneContent {
    pub id: i32,
    pub parent_id: i32,
    pub created_time: i64,
    pub updated_time: i64,
    pub name: String,
    pub contents_type: i32,
    pub deleted: i32,
    pub hidden: i32,
    pub sort: i32,
}

impl IntoTree for &FortuneContent {
    type Output = FortuneContentResponse;

    fn get_id(&self) -> i32 {
        self.id
    }

    fn get_parent_id(&self) -> i32 {
        self.parent_id
    }

    fn convert(&self, children: Vec<Self::Output>) -> Self::Output {
        FortuneContentResponse {
            id: self.id,
            parent_id: 0,
            created_time: 0,
            updated_time: 0,
            name: "".to_string(),
            contents_type: 0,
            deleted: 0,
            hidden: 0,
            children,
            sort: 0
        }
    }
}

